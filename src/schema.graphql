
type Query {
    users(query: String): [User!]!
    posts(query: String): [Post!]!
    me: User!
    post: Post!
    comments: [Comment!]!
}
type Mutation {
    createUser(data: CreateUserInput): User!
    deleteUser(userId: ID!):User!
    updateUser(id: ID!, data: UpdateUserInput!): User!
    createPost(data: CreatePostInput): Post!
    deletePost(postId: ID!): Post!
    updatePost(id: ID!, data: UpdatePostInput!): Post!
    createComment(data: CreateCommentInput): Comment!
    deleteComment(commentId: ID!): Comment!
    updateComment(id: ID!, data: UpdateCommentInput!): Comment!
}
type Subscription {
    count: Int!
}
input CreateUserInput{
    name: String!
    email: String!
    age: Int
}
input UpdateUserInput{
    name: String
    email: String
    age: Int
}
input CreatePostInput{
    title: String!
    body: String!
    published: Boolean!
    author: ID!
}
input UpdatePostInput {
    title: String
    body: String
    published: Boolean
}
input CreateCommentInput{
    textField: String!
    author: ID!
    post: ID!
}
input UpdateCommentInput {
    textField: String 
}

type User {
    id: ID!
    name: String!
    email: String!
    age: Int
    posts: [Post!]!
    comments:[Comment!]!
}
    
type Post {
    id: ID!
    title: String!
    body: String!
    published: Boolean!
    author: User!
    comments: [Comment!]!
}

type Comment {
    id: ID!
    textField: String!
    author: User!
    posts: [Post!]!
}